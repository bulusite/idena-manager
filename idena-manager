#!/bin/bash

verbose=0
command=""
VERSION="v0.2"

show_help()
{
	echo -e "Usage: bash [-h] $0 command" \
	"\n" \
	"Commands:" "\n" \
	"" "1) add [options]" "\t\t\t\t\t" "Add new node instance" "\n" \
	"\t" "Options:" "\n" \
	"\t" "-e \"your_email@host.domain\"" "\t\t\t" "Specify email to get error notifications to" "\n" \
	"\t" "-n num" "\t\t\t\t\t" "num specifies how many node instances you want to install. Default: 1" "\n" \
	"\t" "-l location" "\t\t\t\t\t" "location specifies where you want to install the node instance" "\n" \
	"\t" "-p port_num" "\t\t\t\t\t" "Starting listening port number. Default: 40404" "\n" \
	"\t" "-i port_num" "\t\t\t\t\t" "Starting Ipfs port number. Default 40405. If none selected, script will use" \
	"listening port number as a starting point" "\n" \
	"\t" "-r port_num" "\t\t\t\t\t" "Starting RPC port number. Default 9009" "\n" \
	"\t" "-k api_key" "\t\t\t\t\t" "API key (for first instance). If empty, random will be generated" "\n" \
	"\t" "-w wallet" "\t\t\t\t\t" "Wallet key (for first instance). If empty, random will be generated" "\n" \
	"\n" \
	"" "2) update" "\t\t\t\t\t\t" "Update node version on all instances" "\n" \
	"" "3) set-notifications \"your_email@host.domain\"" "\t" "Set or change email for error notifications" "\n"\
	"" "4) disable-notifications" "\t\t\t\t" "Disable email notifications" "\n"\
	"" "5) enable [node [node [node]]]" "\t\t\t" "Enable node server. If no node identificator is sent, all nodes "\
	"will be enabled. Example: enable 1 2 - will enable node 1 and node 2" "\n" \
	"" "5) disable [node [node [node]]]" "\t\t\t" "Disable node server. If no node identificator is sent, all nodes "\
	"will be disabled. Example: disable 1 2 - will disable node 1 and node 2" \
	"\n" \
	"\n" \
	"Please note: only one email for all instances can be set. In case you add new server and set another email" \
	"during installation, that email will be used for all other instances as well"
}

set_notifications()
{
	email=$2

	write_json 'email' "$email"

	generate_configs
}

set_path()
{
	location=$(dirname $(get_realpath_location "$0"))

	if ! hash idena-manager 2>/dev/null;
	then
		echo "PATH=\$PATH:$location" >> ~/.bashrc
		export PATH=$PATH:$location
	fi
}

success_notification()
{
	if [ ! -z "$3" ]
	then
		write_notification "" "32" "$1" "$2" "$3"
	elif [ ! -z "$2" ]
	then
		write_notification "" "32" "$1" "$2"
	elif [ ! -z "$1" ]
	then
		write_notification "" "32" "" "$1"
	fi
}

error_notification()
{
	if [ ! -z "$3" ]
	then
		write_notification "41" "" "$1" "$2" "$3"
	elif [ ! -z "$2" ]
	then
		write_notification "41" "" "$1" "$2"
	elif [ ! -z "$1" ]
	then
		write_notification "41" "" "" "$1"
	fi
}

write_notification()
{
	background_color="$1"
	foreground_color="$2"
	prefix="$3"
	message="$4"
	suffix="$5"

	[ -z "$background_color" ] && background_color="49"
	[ -z "$foreground_color" ] && foreground_color="39"

	echo -e "$prefix\e[0;"$foreground_color";"$background_color"m$message\e[0m$suffix" >&2
}

is_root_user()
{
	[ "$(id -u)" -eq 0 ]
}

read_integer()
{
	# $1 - prompt text, $2 - min number - if empty no min, $3 - pre-entered value
	[ ! -z "$3" ] && number="$3"
	while true; do
		if [ -z "$number" ]
		then
			read -p "$1" number
		fi
		if ! echo "$number" | egrep -q '^[0-9]+$'
		then
			error_notification "Please enter valid number"
			number=""
		elif [ ! -z "$2" ]
		then
			if ! [ $number -gt "$(($2))" ]
			then
				error_notification "Please enter number larger than $2"
				number=""
			else
				break
			fi
		else
			break
		fi
	done

	echo "$number"
}

write_json()
{
	param_name=$1
	param_value=$2
	write_object=$3
	config_file=$4

	[ -z "$config_file" ] && config_file=~/.idena.config

	[ -z "$write_object" ] && write_object=0

	[ ! -f $config_file ] && echo "{}" > $config_file

	tmp=$(mktemp)
	if [ "$write_object" -eq 0 ]
	then
		jq -c --arg value "$param_value" ".$param_name = \$value" $config_file > "$tmp" && mv "$tmp" $config_file
	else
		jq -c ".$param_name = $param_value" $config_file > "$tmp" && mv "$tmp" $config_file
	fi
}

get_json()
{
	filter=$1
	config_file=$2

	[ -z "$config_file" ] && config_file=~/.idena.config

	[ ! -f $config_file ] && echo "{}" > $config_file

	echo $(jq -rc "$filter" $config_file)
}

load_ports()
{
	ports=()
	for port in $(get_json '.nodes[]?.listen_port'); do
		ports+=("$port")
	done

	for port in $(get_json '.nodes[]?.ipfs_port'); do
		ports+=("$port")
	done

	for port in $(get_json '.nodes[]?.rpc_port'); do
		ports+=("$port")
	done

	echo "${ports[@]}"
}

find_next_port()
{
	use_port="$1"
	ports=("$@")

	while (true) do
		port_occupied=0
		for i in ${ports[1]}
		do
			if [ "$i" -eq "$use_port" ]
			then
				port_occupied=1
			fi
		done

		[ "$port_occupied" -eq 0 ] && break

		use_port=$(($use_port+1))
	done

	echo "$use_port"
}

enable()
{
	nodes=("$@")
	declare -A nodes_to_enable
	for node_i in "${nodes[@]:1}"
	do
		nodes_to_enable["node$node_i"]=1
	done

	i=0
	for node in $(get_json '.nodes[]?'); do
		id=$(echo "$node" | jq -r '.id')
		if [ "${#nodes_to_enable[@]}" -gt 0 ]
		then
			if [[ ${nodes_to_enable["node$id"]} ]]
			then
				write_json "nodes[$i].enabled" 1
			fi
		else
			write_json "nodes[$i].enabled" 1
		fi
		i=$((i+1))
	done
	generate_configs
}

disable()
{
	nodes=("$@")
	declare -A nodes_to_remove
	for node_i in "${nodes[@]:1}"
	do
		nodes_to_remove["node$node_i"]=1
	done

	i=0
	for node in $(get_json '.nodes[]?'); do
		id=$(echo "$node" | jq -r '.id')
		if [ "${#nodes_to_remove[@]}" -gt 0 ]
		then
			if [[ ${nodes_to_remove["node$id"]} ]]
			then
				write_json "nodes[$i].enabled" 0
			fi
		else
			write_json "nodes[$i].enabled" 0
		fi
		i=$((i+1))
	done
	#write_json 'email' ""
	generate_configs
}

change_api_key()
{
	node_id=$2
	new_api_key=$3

	if [ -z "$node_id" ]
	then
		error_notification "Please specify Node ID"
		exit 1
	fi

	if [ -z "$new_api_key" ]
	then
		read -p "Please enter node $node_id Api Key (leave empty to automatically generate random key): " new_api_key
	fi

	if [ -z "$new_api_key" ]
	then
		new_api_key=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 13)
	fi

	i=0
	for node in $(get_json '.nodes[]?'); do
		id=$(echo "$node" | jq -r '.id')
		if [ "$node_id" == "$id" ]
		then
			write_json "nodes[$i].api_key" "$new_api_key"
			success_notification "Changed API key for Node ID $node_id to: " "$new_api_key"
			break
		fi
		i=$((i+1))
	done

	generate_configs
}

supervisor_stop()
{
	if hash supervisorctl 2>/dev/null; then
		if test -f "/etc/supervisorct/conf.d/idena.conf"; then
        	if [ -z "$1" ]
        	then
        		sudo supervisorctl stop all > /dev/null
			else
				sudo supervisorctl stop $1 > /dev/null
			fi
		fi
    fi
}

supervisor_stop_idena()
{
	supervisor_stop "idena:*"
}

status()
{
	num_running=0
	num_enabled=0
	for node in $(get_json '.nodes[]?'); do
		enabled=$(echo "$node" | jq -r '.enabled')
		id=$(echo "$node" | jq -r '.id')
		api_key=$(echo "$node" | jq -r '.api_key')
		rpc_port=$(echo "$node" | jq -r '.rpc_port')
		listen_port=$(echo "$node" | jq -r '.listen_port')

		if [ ! $enabled -eq 1 ]
		then
			error_notification \
				"Node ID $id: \tStatus: " \
				"Not active" \
				"\t\t\tAPI key: $api_key\t\tRPC port: $rpc_port\t\tListening port: $listen_port"
			continue
		fi

		num_enabled=$(($num_enabled + 1))

		supervisor_status=$(sudo supervisorctl status idena:node$id | sed -e "s/  //g")
		status=$(echo "$supervisor_status" | cut -d " " -f 1 | sed -e "s/idena:node$id//g")
		uptime=$(echo "$supervisor_status" | cut -d " " -f 5)

		if [ "$status" == "RUNNING" ]
		then
			num_running=$(($num_running + 1))
			success_notification \
				"Node ID $id:\tStatus: " \
				"$status\t\tUptime: $uptime" \
				"\tAPI key: $api_key\t\tRPC port: $rpc_port\t\tListening port: $listen_port"
		elif [ "$status" == "STARTING" ]
		then
			num_running=$(($num_running + 1))
			success_notification \
				"Node ID $id:\tStatus: " \
				"$status" \
				"\t\t\tAPI key: $api_key\t\tRPC port: $rpc_port\t\tListening port: $listen_port"
		else
			error_notification \
				"Node ID $id:\tStatus: " \
				"$status" \
				"\t\t\t\tAPI key: $api_key\t\tRPC port: $rpc_port\t\tListening port: $listen_port"
		fi

	done

	if [ "$num_running" -gt 0 ]
	then
		echo
		success_notification "Please enable inbound traffic to your Listening port on the firewall."
		success_notification "When connecting your Idena client, use RPC port for tunneling"

		email=$(get_json ".email?")
		if ! [ -z "$email" ]
		then
			success_notification \
			"Your emails are going to arrive from this address (probably in spam, so you could create filters): " \
			"$USER@$HOSTNAME"
		fi
	fi

	echo
	success_notification "##########################################################################################\
###############"
	success_notification \
	"    If this idena-manager is helping you, please donate to " \
	"0x5debe0ac6cb3f40b08133b1e2d7cb11c83b06005"
	success_notification "##########################################################################################\
###############"
}

generate_ssh_tunnel()
{
	nodes=("$@")
	declare -A nodes_to_enable
	for node_i in "${nodes[@]:1}"
	do
		nodes_to_enable["node$node_i"]=1
	done

	i=0
	for node in $(get_json '.nodes[]?'); do
		id=$(echo "$node" | jq -r '.id')
		rpc_port=$(echo "$node" | jq -r ".rpc_port")
		rpc_host=$(echo "$node" | jq -r ".rpc_host")
		api_key=$(echo "$node" | jq -r ".api_key")

		if [ "${#nodes_to_enable[@]}" -gt 0 ]
		then
			if [[ ${nodes_to_enable["node$id"]} ]]
			then
				success_notification \
					"Node $id SSH tunnel: " \
					"ssh -N -L $rpc_port:$rpc_host:$rpc_port $USER@server_ip" \
					"API Key: $api_key"
			fi
		else
			success_notification \
				"Node $id SSH tunnel: " \
				"ssh -N -L $rpc_port:$rpc_host:$rpc_port $USER@server_ip" \
				"\tAPI Key you need to use: $api_key"
		fi
		i=$((i+1))
	done
}

supervisor_start()
{
	if hash supervisorctl 2>/dev/null; then
		sudo supervisorctl reread > /dev/null
		sudo supervisorctl update > /dev/null

		if [ -z "$1" ]
		then
			sudo supervisorctl start all > /dev/null
		else
			sudo supervisorctl start $1 > /dev/null
		fi
	fi
}

supervisor_start_idena()
{
	supervisor_start "idena:*"
}

install_required_packages()
{
	email=$(get_json ".email?")

	if ! [ -z "$email" ]
	then
		if ! hash supervisorctl pip sendmail 2>/dev/null;
		then
			success_notification "Installing required packages. Please wait (this can take up to 7 minutes)"

			sudo apt-get -qq update > /dev/null

			if ! hash supervisorctl 2>/dev/null;
			then
				sudo apt-get -qq -y install supervisor > /dev/null
			fi

			if ! hash pip 2>/dev/null;
			then
				sudo apt-get -qq -y install python-pip > /dev/null
			fi

			if ! hash sendmail 2>/dev/null;
			then
				sudo apt-get -qq -y install sendmail > /dev/null
			fi
		fi

		if ! (pip list --format=legacy --disable-pip-version-check | grep -E "^superlance" >/dev/null); then
			sudo pip install -q superlance > /dev/null
		fi
	else
		if ! hash supervisorctl 2>/dev/null; then
			success_notification "Installing required packages. Please wait (this can take up to 2 minutes)"

			sudo apt-get -qq update > /dev/null

			if ! hash supervisorctl 2>/dev/null;
			then
				sudo apt-get -qq -y install supervisor > /dev/null
			fi
		fi
	fi

	set_path
}

download_node()
{
	version="$1"
	location="$2"

	wget -q -nv -O \
		"$location" https://github.com/idena-network/idena-go/releases/download/v$version/idena-node-linux-$version
	chmod +x "$location"
}

do_update_nodes()
{
	latest_version=$(\
		curl -s https://github.com/idena-network/idena-go/releases/latest -I \
		| grep -Fi Location | cut -d "/" -f 8\
		| cut -d "v" -f 2 | tr -d '^M' | tr -d '\r'
	)

	for node in $(get_json '.nodes[]?'); do
		id=$(echo "$node" | jq -r '.id')
		location=$(echo "$node" | jq -r '.location')

		if test -f "$location/idena-node-linux-latest"; then
			node_version=$($location/idena-node-linux-latest --version | cut -d " " -f 3 | tr -d '^M' | tr -d '\r')
			if [ ! "$node_version" = "$latest_version" ]
			then
				supervisor_stop "idena:node$id"
				success_notification "Update node in $location to: " "$latest_version"
				download_node "$latest_version" "$location/idena-node-linux-latest"
				supervisor_start "idena:node$id"
			fi
		else
			supervisor_stop "idena:node$id"
			success_notification "Update node in $location to: " "$latest_version"
			download_node "$latest_version" "$location/idena-node-linux-latest"
			supervisor_start "idena:node$id"
		fi
	done
}

node_update()
{
	timestamp=$(date +"%s")

	response=$(curl -s "https://api.idena.io/api/epoch/last?_=$timestamp" | jq -r '.result.validationTime')
	next_validation=$(date -d $response +"%s")
	less_than="$(($next_validation - 1800))"
	greater_than="$(($next_validation + 3600))"

	if (( $timestamp < $less_than )) || (( $timestamp > $greater_than ));
	then
		do_update_nodes
	fi
}

update()
{
	node_update "$@"
	self_update "$@"
}

self_update()
{
	project_id="17508755"
	location=$(dirname $(get_realpath_location "$0"))

	suim="self-updater-idena-manager"

	if test -f "$location/$suim"; then
		rm $location/$suim
	fi

	latest_version=$(curl -s "https://gitlab.com/api/v4/projects/$project_id/releases" | jq -r '.[0]?.tag_name')

	if [ "$latest_version" != "$VERSION" ]
	then
		success_notification "Updating to version " "$latest_version"
		wget -q -nv -O \
			"$location/$suim" \
			"https://gitlab.com/api/v4/projects/$project_id/repository/files/$suim/raw?ref=$latest_version"
		chmod +x "$location/$suim"
		touch $location/idena-manager-should-self-update
	fi
}

generate_configs()
{
	supervisor_group="[group:idena]\nprograms="
	supervisor_conf=""

	supervisor_stop

	i=0
	for node in $(get_json '.nodes[]?'); do
		enabled=$(echo "$node" | jq -r '.enabled')

		if [ ! $enabled -eq 1 ]
		then
			continue
		fi

		id=$(echo "$node" | jq -r '.id')
		location=$(echo "$node" | jq -r '.location')
		listen_port=$(echo "$node" | jq -r '.listen_port')
		ipfs_port=$(echo "$node" | jq -r '.ipfs_port')
		rpc_port=$(echo "$node" | jq -r '.rpc_port')
		api_key=$(echo "$node" | jq -r '.api_key')
		wallet_key=$(echo "$node" | jq -r '.wallet_key')
		rpc_host=$(echo "$node" | jq -r '.rpc_host')
		ipfs_profile=$(echo "$node" | jq -r '.ipfs_profile')

		mkdir -p $location/datadir-node$id/keystore
		if ! [ -z "$wallet_key" ]
		then
			echo $wallet_key > $location/datadir-node$id/keystore/nodekey
		fi

		echo $api_key > $location/datadir-node$id/api.key

		write_json "" "{\
		DataDir: \"$location/datadir-node$id\",\
		P2P: {\
			ListenAddr: \":$listen_port\",\
			NoDiscovery: false\
		},\
		RPC: {\
			HTTPHost: \"$rpc_host\",\
			HTTPPort: $(($rpc_port))\
		},\
		IpfsConf: {\
			DataDir: \"$location/datadir-node$id\",\
			IpfsPort: $(($ipfs_port)),\
			Profile: \"$ipfs_profile\"\
		}\
		}" 1 $location/config-node$id.json

		if [ $i -gt 0 ]
		then
			supervisor_group=$supervisor_group","
		fi
		supervisor_group=$supervisor_group"node$id"

		supervisor_conf=$supervisor_conf"\n"
		supervisor_conf=$supervisor_conf"[program:node$id]\n"
		supervisor_conf=$supervisor_conf"directory=$location\n"
		supervisor_conf=$supervisor_conf"command=$location/idena-node-linux-latest "
		supervisor_conf=$supervisor_conf"--config=$location/config-%(program_name)s.json --apikey=$api_key\n"
		supervisor_conf=$supervisor_conf"user=$USER\n"
		supervisor_conf=$supervisor_conf"loglevel=info\n"
		supervisor_conf=$supervisor_conf"redirect_stderr=false\n"
		supervisor_conf=$supervisor_conf"stdout_logfile=$location/log_stdout_%(program_name)s.log\n"
		supervisor_conf=$supervisor_conf"stdout_logfile_maxbytes=1GB\n"
		supervisor_conf=$supervisor_conf"stdout_logfile_backups=10\n"
		supervisor_conf=$supervisor_conf"stdout_capture_maxbytes=1GB\n"
		supervisor_conf=$supervisor_conf"stdout_events_enabled=false\n"
		supervisor_conf=$supervisor_conf"stderr_logfile=$location/log_stderr_%(program_name)s.log\n"
		supervisor_conf=$supervisor_conf"stderr_logfile_maxbytes=1GB\n"
		supervisor_conf=$supervisor_conf"stderr_logfile_backups=10\n"
		supervisor_conf=$supervisor_conf"stderr_capture_maxbytes=1GB\n"
		supervisor_conf=$supervisor_conf"std_err_events_enabled=false\n"

		i=$(($i+1))
	done

	email=$(get_json ".email?")
	if ! [ -z "$email" ]
	then
		supervisor_conf=$supervisor_conf"\n"
		supervisor_conf=$supervisor_conf"\n"
		supervisor_conf=$supervisor_conf"[eventlistener:crashmail]\n"
		supervisor_conf=$supervisor_conf"command=crashmail -a -m $email\n"
		supervisor_conf=$supervisor_conf"events=PROCESS_STATE_EXITED\n"
		supervisor_conf=$supervisor_conf"\n"
		supervisor_conf=$supervisor_conf"[eventlistener:fatalmailbatch]\n"
		supervisor_conf=$supervisor_conf"command=fatalmailbatch --toEmail=\"$email\" --fromEmail=\"$USER@$HOSTNAME\"\n"
		supervisor_conf=$supervisor_conf"events=PROCESS_STATE,TICK_60"
	fi

	install_required_packages

	sudo mkdir -p /etc/supervisor/conf.d/
	echo -e $supervisor_group"\n"$supervisor_conf | sudo tee /etc/supervisor/conf.d/idena.conf 1>/dev/null

	setup_crontab

	node_update

	supervisor_start

	i=-1
	for node in $(get_json '.nodes[]?'); do
		i=$(($i+1))
		enabled=$(echo "$node" | jq -r '.enabled')

		if [ ! $enabled -eq 1 ]
		then
			continue
		fi

		rpc_port=$(echo "$node" | jq -r '.rpc_port')
		api_key=$(echo "$node" | jq -r '.api_key')
		rpc_host=$(echo "$node" | jq -r '.rpc_host')
		address=$(echo "$node" | jq -r '.address')

		if [ -z "$address" ]
		then
			address=$(get_node_address "$rpc_host" "$rpc_port" "$api_key")

			if [ ! -z "$address" ]
			then
				write_json "nodes[$i].address" "$address"
			fi
		fi
	done

	status
}

get_node_address()
{
	host="$1"
	port="$2"
	api_key="$3"

	data=$(jq -nc "{\
		method: \"dna_identity\",\
		params: [],\
		id: 1,\
		key: \"$api_key\"\
		}")

	repeations=0
	while (true) do
		address=$(curl -m 10 -s \
			-H "Accept: application/json" \
			-H "Content-Type:application/json" \
			-X POST \
			--data \
			"$data" \
			"http://$host:$port" | jq -r '.result.address')

		if [ ! -z "$addess" ]
		then
			break
		else
			sleep 1
		fi

		[ "$repeations" -gt 10 ] && break

		repeations=$(($repeations + 1))
	done

	echo "$address"
}

setup_crontab()
{
	manager_location=$(dirname $(get_realpath_location "$0"))
	ssu="idena-manager-should-self-update"
	suim="self-updater-idena-manager"

	if crontab -l 2>&1 | grep -q 'idena-manager update'
	then
		crontab -l | grep -v 'idena-manager update' | crontab -
	fi

	if crontab -l 2>&1 | grep -q $ssu
	then
		crontab -l | grep -v $ssu  | crontab -
	fi

	if ! crontab -l 2>&1 | grep -q 'idena-manager update'
	then
		(crontab -l ; echo "*/30 * * * * $manager_location/idena-manager update")| crontab -
	fi

	if ! crontab -l 2>&1 | grep -q $ssu
	then
		(crontab -l; echo -e "* * * * * (cd $manager_location; "\
		"if [ -f \"$ssu\" ]; then ./$suim; rm $ssu; rm ./$suim; fi)")| crontab -
	fi
}

get_realpath_location()
{
	if hash realpath 2>/dev/null; then
		echo $(realpath -s "$1")
	elif hash readlink 2>/dev/null; then
		echo $(readlink -m "$1")
	else
		echo "$1"
	fi
}

add()
{
	if is_root_user
	then
		apt-get -qq -y install jq
	else
		mess="You're running this script as a non-root user. This script needs to install some packages for \
it to work without any problems, so you might be asked to enter your root password during installation"
		write_notification "43" "30" "" "$mess" "\n"
		sudo apt-get -qq -y install jq
	fi

	OPTIND=2
	email=""
	num_instances=""
	install_location=""
	while getopts "e:n:l:p:i:r:k:w:" opt; do
		case "$opt" in
		e)
			email=$OPTARG
			write_json "email" "$email"
			;;
		n)
			num_instances=$OPTARG
			;;
		l)
			install_location=$OPTARG
			;;
		p)
			listening_port_num=$OPTARG
			;;
		i)
			ipfs_port_num=$OPTARG
			;;
		r)
			rpc_port_num=$OPTARG
			;;
		k)
			api_key=$OPTARG
			[ -z "$api_key" ] && api_key="generate_random_key"
			;;
		w)
			wallet_key=$OPTARG
			[ -z "$wallet_key" ] && wallet_key="new_installation"
			;;
		*)
			;;
		esac
	done

	if [ -z "$install_location" ]
	then
		read -p 'Enter location where to install script (leave empty to install in current directory): ' \
		install_location
		if [ -z "$install_location" ]
		then
			install_location=$(pwd)
			success_notification "\tSelected location: " "$install_location"
		else
			install_location=$(get_realpath_location "$install_location")
			if mkdir -p "$install_location"
			then
				success_notification "\tSelected location: " "$install_location"
			else
				error_notification "Failed to create directory: $install_location"
				exit 1
			fi
		fi
	else
		install_location=$(get_realpath_location "$install_location")
		if mkdir -p "$install_location"
		then
			success_notification "\tSelected location: " "$install_location"
		else
			error_notification "Failed to create directory: $install_location"
			exit 1
		fi
	fi

	[ -z "$num_instances" ] && num_instances=1
	num_instances=$(read_integer "How many node instances you want to install (1+): " "0" "$num_instances")

	[ -z "$listening_port_num" ] && listening_port_num=40404
	listening_port_num=$(read_integer "Please enter Listening port number (default: 40404): " "0" "$listening_port_num")
	#success_notification "Listening port number: " "$listening_port_num" "If you're behind firewall, please allow " \
	#"inbound TCP connectiong toward this port"

	[ -z "$ipfs_port_num" ] && ipfs_port_num=40405
	ipfs_port_num=$(read_integer "Please enter Ipfs port number (default: 40405): " "0" "$ipfs_port_num")
	#success_notification "Ipfs port number: " "$ipfs_port_num"

	[ -z "$rpc_port_num" ] && rpc_port_num=9009
	rpc_port_num=$(read_integer "Please enter RPC port number (default: 9009): " "0" "$rpc_port_num")

	existing_number_of_instances=$(get_json '.nodes | length')

	ports=$(load_ports)

	node_i="$existing_number_of_instances"
	i=1
	while [ $node_i -lt $(($existing_number_of_instances + $num_instances)) ]
	do
		listening_port_num=$(find_next_port "$listening_port_num" "${ports[*]}")
		ports+=("$listening_port_num")
		ipfs_port_num=$(find_next_port "$ipfs_port_num" "${ports[*]}")
		ports+=("$ipfs_port_num")
		rpc_port_num=$(find_next_port "$rpc_port_num" "${ports[*]}")
		ports+=("$rpc_port_num")

		if [ ! "$api_key" = "generate_random_key" ]
		then
			read -p "Please enter node $i Api Key (leave empty to automatically generate random key): " api_key
		else
			api_key=""
		fi
		if [ -z "$api_key" ]
		then
			api_key=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 13)
			#printf "\tNode $node_i Api Key is \e[32m$api_key\e[39m\n"
		fi

		if [ "$wallet_key" = "new_installation" ]
		then
			wallet_key=""
		else
			read -p "Please enter node $i wallet (leave empty if this is first/new installation): " wallet_key
		fi

		write_json "nodes[$node_i]" "{\
		id: $(($node_i+1)),\
		location: \"$install_location\",\
		listen_port: $listening_port_num,\
		ipfs_port: $ipfs_port_num,\
		rpc_port: $rpc_port_num,\
		api_key: \"$api_key\",\
		wallet_key: \"$wallet_key\",\
		rpc_host: \"localhost\",\
		ipfs_profile: \"server\",\
		enabled: \"1\"\
		}" 1
		node_i=$(($node_i + 1))
		i=$(($i + 1))
		api_key=""
		wallet_key=""
	done

	generate_configs
}

case $1 in
	add|update|set-notifications|disable-notifications|disable|enable|set-path|cron|status|generate-ssh|install)
		command=$1
		OPTIND=2
		;;
	change-api-key)
		command=$1
		OPTIND=2
		;;
	*)
		OPTIND=1
esac

[ -z "$command" ] && show_help && exit 0

[ "$command" = "add" ] && add "$@"
[ "$command" = "update" ] && update "$@"
[ "$command" = "regenerate" ] && generate_configs
[ "$command" = "disable" ] && disable "$@"
[ "$command" = "enable" ] && enable "$@"
[ "$command" = "install" ] && install_required_packages
[ "$command" = "set-notifications" ] && set_notifications "$@"
[ "$command" = "disable-notifications" ] && set_notifications ""
[ "$command" = "self-update" ] && self_update "$@"
[ "$command" = "node-update" ] && node_update "$@"
[ "$command" = "set-path" ] && set_path
[ "$command" = "cron" ] && setup_crontab
[ "$command" = "status" ] && status "$@"
[ "$command" = "generate-ssh" ] && generate_ssh_tunnel "$@"
[ "$command" = "change-api-key" ] && change_api_key "$@"

shift $((OPTIND-1))

[ "${1:-}" = "--" ] && shift

#echo "verbose=$verbose, command=$command, leftovers=$@"